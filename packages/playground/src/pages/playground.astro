---
import MainLayout from "../layouts/MainLayout.astro";
---

<MainLayout>
  <div class="playground">
    <div class="params">
      <div class="param">
        <span>Effect</span>
        <select name="effect" class="param-input">
          <option value="slide">Slide</option>
          <option value="relax">Relax</option>
          <option value="zoom">Zoom</option>
          <option value="helix">Helix</option>
        </select>
      </div>
      <div class="param">
        <span>Direction</span>
        <select name="direction" class="param-input">
          <option value="top">Top</option>
          <option value="left">Left</option>
          <option value="bottom">Bottom</option>
          <option value="right">Right</option>
        </select>
      </div>
      <div class="param">
        <span>Origin</span>
        <select name="origin" class="param-input">
          <option value="top">top</option>
          <option value="left">left</option>
          <option value="bottom">bottom</option>
          <option value="right">right</option>
        </select>
      </div>
      <div class="param">
        <span>Scale</span>
        <input value="87" name="scale" class="param-input" type="number" min="10" max="200" />
      </div>
      <div class="param">
        <span>Duration</span>
        <input name="duration" class="param-input" type="number" value="640" min="50" max="3000" />
      </div>
      <div class="param">
        <span>Delay</span>
        <input value="0" name="delay" class="param-input" type="number" min="0" max="3000" />
      </div>
      <label class="param">
        <span>Continue</span>
        <input name="continue" class="param-input" type="checkbox" />
      </label>
      <label class="param">
        <span>Spin</span>
        <input name="spin" class="param-input" type="checkbox" />
      </label>
      <div class="param">
        <span>Spin size</span>
        <input value="24" name="spinSize" class="param-input" type="number" min="0" max="3000" />
      </div>
      <button id="play">Play</button>
    </div>
    <div class="preview">
      <div class="figure"></div>
      <div class="figure"></div>
      <div class="figure"></div>
    </div>
  </div>
</MainLayout>

<script>
  const inputs = document.querySelectorAll<HTMLInputElement>(".param-input");
  const params: Record<string, any> = {};

  function handleParams() {
    console.log(params);
  }

  function updateInputValue(input: HTMLInputElement): void {
    const key = input.name;
    switch (input.type) {
      case "checkbox":
        params[key] = input?.checked;
        break;
      case "number":
        params[key] = parseInt(input.value, 10);
        break;
      default:
        params[key] = input.value;
    }
  }

  function handleInput(e: Event) {
    updateInputValue(e.target as HTMLInputElement);
    handleParams();
  }

  function initialize() {
    inputs.forEach((i) => updateInputValue(i));
    inputs.forEach((i) => {
      i.addEventListener("input", handleInput);
    });
  }

  initialize();
</script>

<style lang="scss">
  .playground {
    display: grid;
    grid-template-columns: 290px 1fr;
  }

  .param {
    display: grid;
    grid-template-columns: 120px 1fr;
    align-items: center;

    span {
      font-size: 18px;
      font-weight: 700;
      padding: 6px 15px;
      padding-left: 0;
    }
  }

  .params {
    display: flex;
    flex-direction: column;
    gap: 8px;
    padding: 25px;
  }

  select,
  input[type="number"] {
    font-size: 18px;
    font-weight: 700;
    appearance: none;
    background-color: aquamarine;
    border: none;
    background-color: rgba(255, 255, 255, 0.09);
    border-radius: 8px;
    padding: 6px 15px;
  }

  input[type="checkbox"] {
    width: fit-content;
  }

  .preview {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(3, 1fr);
    height: 100vh;
    padding: 25px;
    gap: 16px;
  }

  .preview .figure {
    background-color: #323232;

    &:nth-child(2) {
      grid-column: 2;
      grid-row: 2;
    }

    &:nth-child(3) {
      grid-column: 3;
      grid-row: 3;
    }
  }

  #play {
    appearance: none;
    background-color: transparent;
    border-radius: 100px;
    font-size: 18px;
    border: none;
    outline: 3px solid var(--color-honey);
    padding: 7px 0;
    font-weight: 700;
    color: var(--color-foreground);
    margin-top: 16px;
  }
</style>
<!-- // Appearance
effect: data.effect ? data.effect as unknown as AnimationEffect : 'slide',
direction: directionFromData(data),
origin: data.origin ? data.origin as AnimationDirection : AnimationDirection.top,
scale: safeParseFloat(data.scale, 0.87),
offset: offsetFromData(data, 32),
// Timings
duration: safeParseInt(data.duration, 640),
delay: safeParseInt(data.delay, 0),
// Awaits
expose: supportsExpose && isPropertyExists(data, 'expose'),
await: data.await ?? '',
continue: isPropertyExists(data, 'continue'),
// Spinner
spin: isPropertyExists(data, 'spin'),
spinSize: safeParseInt(data.spinSize, 24)
} -->
