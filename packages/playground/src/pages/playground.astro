---
import MainLayout from "../layouts/MainLayout.astro";
---

<MainLayout>
  <div class="playground">
    <div class="params">
      <div class="param">
        <span>Effect</span>
        <select name="effect" class="param-input">
          <option value="slide">Slide</option>
          <option value="relax">Relax</option>
          <option value="zoom">Zoom</option>
          <option value="fade">Fade</option>
        </select>
      </div>
      <div class="param">
        <span>Direction</span>
        <select name="direction" class="param-input">
          <option value="top">Top</option>
          <option value="left">Left</option>
          <option value="bottom">Bottom</option>
          <option value="right">Right</option>
        </select>
      </div>
      <div class="param">
        <span>Origin</span>
        <select name="origin" class="param-input">
          <option value="center">Center</option>
          <option value="top">Top</option>
          <option value="left">Left</option>
          <option value="bottom">Bottom</option>
          <option value="right">Right</option>
        </select>
      </div>
      <div class="param">
        <span>Scale</span>
        <input value="87" name="scale" class="param-input" type="number" min="10" max="200" />
      </div>
      <div class="param">
        <span>Offset</span>
        <input value="32" name="offset" class="param-input" type="number" min="10" max="300" />
      </div>
      <div class="param">
        <span>Duration</span>
        <input name="duration" class="param-input" type="number" value="640" min="50" max="3000" />
      </div>
      <div class="param">
        <span>Delay</span>
        <input value="100" name="delay" class="param-input" type="number" min="0" max="3000" />
      </div>
      <label class="param">
        <span>Continue</span>
        <input name="continue" class="param-input" type="checkbox" />
      </label>
      <label class="param">
        <span>Spin</span>
        <input name="spin" class="param-input" type="checkbox" />
      </label>
      <div class="param">
        <span>Spin size</span>
        <input value="24" name="spinSize" class="param-input" type="number" min="0" max="3000" />
      </div>
      <button id="play">Play</button>
    </div>
    <div class="preview">
      <div class="figure honey"></div>
      <div class="figure honey"></div>
      <div class="figure honey"></div>
    </div>
  </div>
</MainLayout>

<script>
  import { AnimationParams, animate } from "../../../lib/src";
  const inputs = document.querySelectorAll<HTMLInputElement>(".param-input");
  const button = document.querySelector("button")!;
  const params: any = {};

  const disabledParams = {
    'slide': ['scale', 'origin'],
    'relax': ['offset', 'direction'],
    'zoom': ['offset', 'direction'],
    'helix': ['offset', 'direction']
  }

  function disableFields () {
    const banned = disabledParams[params.effect as keyof typeof disabledParams]
    for (const input of inputs) {
      if (banned.includes(input.name)) {
        input.parentElement!.classList.add('__disabled')
      } else {
        input.parentElement!.classList.remove('__disabled')
      }
    }
  }

  function updateValue(input: HTMLInputElement) {
    const key = input.name as keyof AnimationParams;
    switch (input.type) {
      case "checkbox":
        params[key] = input.checked;
        break;
      case "number":
        params[key] = parseInt(input.value, 10);
        break;
      default:
        params[key] = input.value;
    }
    disableFields()
  }

  let reset: (() => void) | undefined;
  async function animatePreview() {
    if (reset) {
      reset();
      reset = undefined;
    }
    button.disabled = true;
    const { clear } = await animate({
      prepareParams: () => params as AnimationParams,
    });
    button.disabled = false;
    reset = clear;
  }

  function initialize() {
    inputs.forEach((i) => {
      i.addEventListener("input", (e) => {
        updateValue(e.target as HTMLInputElement);
      });
      updateValue(i);
    });
    animatePreview()
    button.onclick = animatePreview;
  }

  initialize();
</script>

<style lang="scss">
  .playground {
    display: grid;
    grid-template-columns: 290px 1fr;
  }

  .param {
    display: grid;
    grid-template-columns: 120px 1fr;
    align-items: center;
    transition: opacity .3s ease;

    &.__disabled {
      pointer-events: none;
      opacity: 0.3;
    }

    span {
      font-size: 18px;
      font-weight: 700;
      padding: 6px 15px;
      padding-left: 0;
    }
  }

  .params {
    display: flex;
    flex-direction: column;
    gap: 8px;
    padding: 25px;
  }

  select,
  input[type="number"] {
    font-size: 18px;
    font-weight: 700;
    appearance: none;
    background-color: aquamarine;
    border: none;
    background-color: rgba(255, 255, 255, 0.09);
    border-radius: 8px;
    padding: 6px 15px;
  }

  input[type="checkbox"] {
    width: fit-content;
  }

  .preview {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(3, 1fr);
    height: 100vh;
    padding: 25px;
    gap: 16px;
  }

  .preview .figure {
    background-color: #323232;

    &:nth-child(2) {
      grid-column: 2;
      grid-row: 2;
    }

    &:nth-child(3) {
      grid-column: 3;
      grid-row: 3;
    }
  }

  #play {
    appearance: none;
    background-color: transparent;
    border-radius: 100px;
    font-size: 18px;
    border: none;
    outline: 5px solid var(--color-honey);
    padding: 7px 0;
    font-weight: 700;
    color: var(--color-foreground);
    margin-top: 16px;
    transition: 0.6s cubic-bezier(0, 0.9, 0.1, 1);

    &:hover {
      outline-width: 8px;
    }

    &:active {
      outline-width: 3px;
    }

    &:disabled {
      outline-color: var(--color-honey-disabled);
      color: var(--color-honey-disabled);
      outline-width: 3px;
    }
  }
</style>
